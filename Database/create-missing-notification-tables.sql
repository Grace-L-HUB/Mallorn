-- ================================================================
-- 创建缺失的通知系统表
-- 解决 NotificationBackgroundService 报错：ORA-00942: table or view does not exist
-- ================================================================

-- 设置容器到 XEPDB1
-- ALTER SESSION SET CONTAINER=XEPDB1;
-- 连接到用户
-- CONNECT CAMPUS_TRADE_USER/"CampusTrade123!"@XEPDB1;

-- 启用DBMS_OUTPUT
SET SERVEROUTPUT ON;

-- ================================================================
-- 1. 创建SignalR通知表 (SIGNALR_NOTIFICATIONS)
-- ================================================================
BEGIN
    DBMS_OUTPUT.PUT_LINE('开始创建 SIGNALR_NOTIFICATIONS 表...');
    
    EXECUTE IMMEDIATE '
    CREATE TABLE SIGNALR_NOTIFICATIONS (
        SIGNALR_NOTIFICATION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NOTIFICATION_ID NUMBER NOT NULL,
        CONNECTION_ID VARCHAR2(100),
        GROUP_NAME VARCHAR2(50),
        SEND_STATUS VARCHAR2(20) DEFAULT ''待发送'' NOT NULL,
        RETRY_COUNT NUMBER DEFAULT 0 NOT NULL,
        LAST_ATTEMPT_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        SENT_AT TIMESTAMP,
        ERROR_MESSAGE VARCHAR2(500),
        
        -- 约束检查
        CONSTRAINT CK_SIGNALR_NOTIFICATIONS_SEND_STATUS 
            CHECK (SEND_STATUS IN (''待发送'',''成功'',''失败'')),
        CONSTRAINT CK_SIGNALR_NOTIFICATIONS_RETRY_COUNT 
            CHECK (RETRY_COUNT >= 0),
        
        -- 外键约束
        CONSTRAINT FK_SIGNALR_NOTIFICATION_NOTIFICATION 
            FOREIGN KEY (NOTIFICATION_ID) REFERENCES NOTIFICATIONS(NOTIFICATION_ID) ON DELETE CASCADE
    )';
    
    DBMS_OUTPUT.PUT_LINE('✓ SIGNALR_NOTIFICATIONS 表创建成功');

EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('⚠ SIGNALR_NOTIFICATIONS 表已存在，跳过创建');
        ELSE
            DBMS_OUTPUT.PUT_LINE('✗ 创建 SIGNALR_NOTIFICATIONS 表失败: ' || SQLERRM);
            RAISE;
        END IF;
END;
/

-- ================================================================
-- 2. 创建邮件通知表 (EMAIL_NOTIFICATIONS)
-- ================================================================
BEGIN
    DBMS_OUTPUT.PUT_LINE('开始创建 EMAIL_NOTIFICATIONS 表...');
    
    EXECUTE IMMEDIATE '
    CREATE TABLE EMAIL_NOTIFICATIONS (
        EMAIL_NOTIFICATION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        EMAIL_TYPE VARCHAR2(20) NOT NULL,
        NOTIFICATION_ID NUMBER,
        RECIPIENT_EMAIL VARCHAR2(100) NOT NULL,
        SUBJECT VARCHAR2(200) NOT NULL,
        CONTENT CLOB NOT NULL,
        VERIFICATION_CODE VARCHAR2(10),
        CODE_EXPIRES_AT TIMESTAMP,
        SEND_STATUS VARCHAR2(20) DEFAULT ''待发送'' NOT NULL,
        RETRY_COUNT NUMBER DEFAULT 0 NOT NULL,
        LAST_ATTEMPT_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        SENT_AT TIMESTAMP,
        ERROR_MESSAGE VARCHAR2(500),
        
        -- 约束检查
        CONSTRAINT CK_EMAIL_NOTIFICATIONS_EMAIL_TYPE 
            CHECK (EMAIL_TYPE IN (''通知'',''验证码'')),
        CONSTRAINT CK_EMAIL_NOTIFICATIONS_SEND_STATUS 
            CHECK (SEND_STATUS IN (''待发送'',''成功'',''失败'')),
        CONSTRAINT CK_EMAIL_NOTIFICATIONS_RETRY_COUNT 
            CHECK (RETRY_COUNT >= 0),
        
        -- 外键约束（验证码类型时可为空）
        CONSTRAINT FK_EMAIL_NOTIFICATION_NOTIFICATION 
            FOREIGN KEY (NOTIFICATION_ID) REFERENCES NOTIFICATIONS(NOTIFICATION_ID) ON DELETE SET NULL
    )';
    
    DBMS_OUTPUT.PUT_LINE('✓ EMAIL_NOTIFICATIONS 表创建成功');

EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('⚠ EMAIL_NOTIFICATIONS 表已存在，跳过创建');
        ELSE
            DBMS_OUTPUT.PUT_LINE('✗ 创建 EMAIL_NOTIFICATIONS 表失败: ' || SQLERRM);
            RAISE;
        END IF;
END;
/

-- ================================================================
-- 3. 创建索引（如果表创建成功）
-- ================================================================
BEGIN
    DBMS_OUTPUT.PUT_LINE('开始创建索引...');
    
    -- SignalR通知表索引
    EXECUTE IMMEDIATE 'CREATE INDEX IX_SIGNALR_NOTIFICATIONS_NOTIFICATION_ID ON SIGNALR_NOTIFICATIONS(NOTIFICATION_ID)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_SIGNALR_NOTIFICATIONS_SEND_STATUS ON SIGNALR_NOTIFICATIONS(SEND_STATUS)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_SIGNALR_NOTIFICATIONS_CONNECTION_ID ON SIGNALR_NOTIFICATIONS(CONNECTION_ID)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_SIGNALR_NOTIFICATIONS_CREATED_AT ON SIGNALR_NOTIFICATIONS(CREATED_AT)';
    
    -- 邮件通知表索引
    EXECUTE IMMEDIATE 'CREATE INDEX IX_EMAIL_NOTIFICATIONS_NOTIFICATION_ID ON EMAIL_NOTIFICATIONS(NOTIFICATION_ID)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_EMAIL_NOTIFICATIONS_EMAIL_TYPE ON EMAIL_NOTIFICATIONS(EMAIL_TYPE)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_EMAIL_NOTIFICATIONS_SEND_STATUS ON EMAIL_NOTIFICATIONS(SEND_STATUS)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_EMAIL_NOTIFICATIONS_RECIPIENT_EMAIL ON EMAIL_NOTIFICATIONS(RECIPIENT_EMAIL)';
    EXECUTE IMMEDIATE 'CREATE INDEX IX_EMAIL_NOTIFICATIONS_CREATED_AT ON EMAIL_NOTIFICATIONS(CREATED_AT)';
    
    DBMS_OUTPUT.PUT_LINE('✓ 所有索引创建成功');

EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('⚠ 部分索引已存在，跳过创建');
        ELSE
            DBMS_OUTPUT.PUT_LINE('⚠ 创建索引时出现问题: ' || SQLERRM);
            -- 不抛出异常，索引创建失败不影响表的使用
        END IF;
END;
/

-- ================================================================
-- 4. 检查结果
-- ================================================================
BEGIN
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('=== 创建结果检查 ===');
    
    -- 检查表是否存在
    DECLARE
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM USER_TABLES WHERE TABLE_NAME = 'SIGNALR_NOTIFICATIONS';
        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('✓ SIGNALR_NOTIFICATIONS 表存在');
        ELSE
            DBMS_OUTPUT.PUT_LINE('✗ SIGNALR_NOTIFICATIONS 表不存在');
        END IF;
        
        SELECT COUNT(*) INTO v_count FROM USER_TABLES WHERE TABLE_NAME = 'EMAIL_NOTIFICATIONS';
        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('✓ EMAIL_NOTIFICATIONS 表存在');
        ELSE
            DBMS_OUTPUT.PUT_LINE('✗ EMAIL_NOTIFICATIONS 表不存在');
        END IF;
        
        SELECT COUNT(*) INTO v_count FROM USER_TABLES WHERE TABLE_NAME = 'NOTIFICATIONS';
        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('✓ NOTIFICATIONS 表存在');
        ELSE
            DBMS_OUTPUT.PUT_LINE('⚠ NOTIFICATIONS 表不存在（需要先运行 init-oracle.sql）');
        END IF;
        
        SELECT COUNT(*) INTO v_count FROM USER_TABLES WHERE TABLE_NAME = 'NOTIFICATION_TEMPLATES';
        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('✓ NOTIFICATION_TEMPLATES 表存在');
        ELSE
            DBMS_OUTPUT.PUT_LINE('⚠ NOTIFICATION_TEMPLATES 表不存在（需要先运行 init-oracle.sql）');
        END IF;
    END;
    
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('=== 脚本执行完成 ===');
    DBMS_OUTPUT.PUT_LINE('请重启后端应用以应用更改');
END;
/
